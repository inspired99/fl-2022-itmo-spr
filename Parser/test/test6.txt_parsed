(start (functionSpecifier my_fun1 ( ) { (funcInnerStatement (functionInvokation print ( (logicExpr (compare (arithmeticExpr (baseExpr x)))) ))) }) (entryPoint main ( ) { }) (functionSpecifier my_fun2 ( x , y ) { (funcInnerStatement (functionInvokation fn ( main ))) ; (funcInnerStatement (functionInvokation my_fun3 ( (logicExpr (compare (arithmeticExpr (baseExpr a)))) ))) ; (funcInnerStatement (assignment a = (logicExpr (compare (arithmeticExpr (baseExpr (functionInvokation fn ( (logicExpr (compare (arithmeticExpr (baseExpr (functionInvokation fn ( (logicExpr (compare (arithmeticExpr (baseExpr x)))) )))))) , (logicExpr (compare (arithmeticExpr (baseExpr fn)))) , (logicExpr (compare (arithmeticExpr (baseExpr my_fun2)))) , (logicExpr (compare (arithmeticExpr (baseExpr (functionInvokation my_fun2 ( )))))) )))))))) ; (funcInnerStatement (functionInvokation x ( ))) ; (funcInnerStatement (ifStatement if ( (logicExpr (compare (arithmeticExpr (baseExpr x)))) ) (statement (funcInnerStatement (functionInvokation return ( (logicExpr (compare (arithmeticExpr (arithmeticExpr (arithmeticExpr (baseExpr x)) + (arithmeticExpr (baseExpr y))) - (arithmeticExpr (baseExpr "Hello"))))) )))) else (statement (funcInnerStatement (functionInvokation return ( (logicExpr (compare (arithmeticExpr (arithmeticExpr (baseExpr y)) + (arithmeticExpr (baseExpr 1))))) ))) ; (funcInnerStatement (functionInvokation my_fun3 ( ))) ; (funcInnerStatement (skipStatement skip))))) }) <EOF>)